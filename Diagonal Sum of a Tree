#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *lchild, *rchild;
};

map<int, int> grid;

struct Node *createNode(int data) {
    struct Node *newnode = (struct Node *)malloc(sizeof(struct Node));
    newnode->data=data;
    newnode->lchild=newnode->rchild=NULL;
    return newnode;
}

void diagonalSumUtil(Node *root, int level, int index) {
    if(!root)
        return;
    grid[level - index] += root->data;
    diagonalSumUtil(root->lchild, level+1, index-1);
    diagonalSumUtil(root->rchild, level+1, index+1);
}

vector<int> diagonalSum(Node *root) {
    grid.clear();
    diagonalSumUtil(root, 0, 0);
    vector<int> sum;
    for(auto x: grid)
        sum.push_back(x.second);
    return sum;

}


int main()
{
     struct Node* root = createNode(1);
    root->lchild = createNode(2);
    root->rchild = createNode(3);
    root->lchild->lchild = createNode(9);
    root->lchild->rchild = createNode(6);
    root->rchild->lchild= createNode(4);
    root->rchild->rchild= createNode(5);
    root->rchild->lchild->rchild = createNode(7);
    root->rchild->lchild->lchild = createNode(12);
    root->lchild->rchild->lchild = createNode(11);
    root->lchild->lchild->rchild = createNode(10);

    vector<int> v = diagonalSum(root);
    for(int i=0; i<v.size(); i++)
        cout << v[i] << " ";
    return 0;
}
